/* 
  *   Speech.java generated by speechmod 
 */   

package scxmlgen.Modalities; 

import scxmlgen.interfaces.IModality; 

public enum Speech implements IModality{

    /*SQUARE("[shape][SQUARE]",1500),
    TRIANGLE("[shape][TRIANGLE]",1500),
    CIRCLE("[shape][CIRCLE]",1500);
    
    NEXT("[NEXT]",1500),
    NEXT_PRESENTATION("[NEXT_PRESENTATION]",1500),
    PREVIOUS("[PREVIOUS]",1500),
    PREVIOUS_PRESENTATION("[PREVIOUS_PRESENTATION]",1500),
    OPEN_POWERPOINT("[OPEN_POWERPOINT]",1500),
    CLOSE_POWERPOINT("[CLOSE]",1500),
    JUMPTO("[JUMP_TO]",1500),
    JUMPTO_PRESENTATION("[JUMP_TO_SLIDE_PRESENTATION]",1500),
    READ_TITLE("[TITLE_PRESENTATION]",1500),
    READ_TEXT("[TEXT_PRESENTATION]",1500),
    READ_NOTES("[NOTE_PRESENTATION]",1500),
    ZOOMOUT("[ZoomO][]",1500),
    ZOOMIN("[ZoomI][]",1500),
    CROPOUT("[CropO][]",1500),
    CROPIN("[CropI][]",1500),
    THEME_ONE("[1]",1500),
    THEME_TWO("[2]",1500),
    THEME_THREE("[3]",1500),
    YES("[YES]",1500),
    NO("[NO]",1500);
    */
    
    OPEN_POWERPOINT("[openPowerPoint][OPEN_POWERPOINT]",1500),
    CLOSE_POWERPOINT("[close][CLOSE]",1500),
    NEXT("[slide][NEXT]",1500),
    NEXT_GESTURES("[NextR]",1500),
    PREVIOUS_GESTURES("[PreviouL]",1500),
    PREVIOUS("[slide][PREVIOUS]",1500),
    JUMPTO("[slide][JUMP_TO]",1500),

    READ_TITLE("[read][TITLE]",1500),
    READ_TEXT("[read][TEXT]",1500),
    READ_NOTES("[read][NOTE]",1500),
    
    START_PRESENTATION("[presentation][START]", 1500),
    STOP_PRESENTATION("[presentation][STOP_PRESENTATION]", 1500),
    
    ZOOMOUT("[ZoomO]",1500),
    ZOOMIN("[ZoomI]",1500),
    CROPOUT("[CropO]",1500),
    CROPIN("[CropI]",1500),
    
    CHANGE_THEME_ONE("[theme][1]", 1500),
    CHANGE_THEME_TWO("[theme][2]", 1500),
    CHANGE_THEME_THREE("[theme][3]", 1500),
    
    YES("[YES]",1500),
    NO("[NO]",1500);
    
    ;



    private String event;
    private int timeout;
    Speech(String m, int time) {
            event=m;
            timeout=time;
    }
    @Override
    public int getTimeOut(){
            return timeout;
    }
    @Override
    public String getEventName(){
            return event;
    }
    @Override
    public String getEvName(){
            return getModalityName().toLowerCase() +event.toLowerCase();
    }

}
